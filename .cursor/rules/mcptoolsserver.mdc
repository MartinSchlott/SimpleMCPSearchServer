---
description: This guide provides a concise overview of how to implement an Anthropic Model Context Protocol (MCP) server that offers tools in TypeScript.
globs: 
alwaysApply: false
---
# MCP Server Implementation Guide: Tools via HTTP & stdio

This guide details how to build an Anthropic Model Context Protocol (MCP) server in TypeScript to expose **Tools**. It utilizes the high-level `@modelcontextprotocol/sdk`'s `McpServer` API for simplicity and Zod for robust input schema definition and validation.

Updated for MCP Specification 2025-03-26 with tool annotations and output schemas.

It covers two common transport methods:
1.  **Streamable HTTP:** For network-accessible servers using a persistent server instance.
2.  **stdio:** For direct command-line integration.

**Target Audience:** Proficient AI Coders new to MCP.

## 1. Core Concept: `McpServer` and Tools

The `McpServer` class (`@modelcontextprotocol/sdk/server/mcp.js`) provides a streamlined way to define server capabilities. We focus on `server.tool()` with input schemas, output schemas, and tool annotations.

```typescript
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod"; // For schema definition

// Define input schema for the 'add_numbers' tool
const AddNumbersInputSchema = z.object({
  a: z.number().describe("The first number to add"),
  b: z.number().describe("The second number to add"),
});

// Define output schema for the 'add_numbers' tool
const AddNumbersOutputSchema = z.object({
  result: z.number().describe("The sum of the two numbers"),
  operation: z.string().describe("Description of the operation performed"),
});

// Define input schema for the 'get_weather' tool
const GetWeatherInputSchema = z.object({
    location: z.string().describe("The city and state, e.g. San Francisco, CA"),
});

// Define output schema for the 'get_weather' tool
const GetWeatherOutputSchema = z.object({
    location: z.string().describe("The location queried"),
    temperature: z.number().describe("Temperature in Celsius"),
    conditions: z.string().describe("Weather conditions"),
    humidity: z.number().describe("Humidity percentage"),
});

/**
 * Creates and configures the MCP server instance.
 * Define all your tools within this function.
 */
function createMcpServer(): McpServer {
  const server = new McpServer({
    // Basic server metadata
    name: "my-tool-server",
    version: "1.0.0",
  });

  // Define a tool with input schema, output schema, and annotations
  server.registerTool("add_numbers", {
    description: "Adds two numbers together.",
    inputSchema: AddNumbersInputSchema.shape,   // Input schema
    outputSchema: AddNumbersOutputSchema.shape, // Output schema
    annotations: {
      title: "Number Addition Calculator",      // Human-readable title for UI
      readOnlyHint: true,                      // Tool doesn't modify environment
      idempotentHint: true,                    // Same input = same output
      openWorldHint: false,                    // Doesn't interact with external services
    }
  }, async ({ a, b }) => {                     // Handler receives parsed & validated arguments
    // --- Tool Logic ---
    const result = a + b;
    console.log(`Tool 'add_numbers' executed: ${a} + ${b} = ${result}`);

    // --- Return structured result matching output schema ---
    return {
      content: [],  // Empty content array to minimize network overhead
      structuredContent: {
        result: result,
        operation: `Added ${a} and ${b}`
      }
    };
  });

  // Example tool with external interaction
  server.registerTool("get_weather", {
    description: "Gets the current weather for a specific location.",
    inputSchema: GetWeatherInputSchema.shape,
    outputSchema: GetWeatherOutputSchema.shape,
    annotations: {
      title: "Weather Information",
      readOnlyHint: true,                      // Read-only data fetch
      idempotentHint: false,                   // Weather can change
      openWorldHint: true,                     // Interacts with external weather API
    }
  }, async ({ location }) => {
    console.log(`Tool 'get_weather' executed for: ${location}`);
    
    // Simulate API call or database query
    const weatherData = {
        location: location,
        temperature: 22,
        conditions: "sunny",
        humidity: 65
    };
    
    return { 
      content: [],  // Empty content array to minimize network overhead
      structuredContent: weatherData
    };
  });

  return server;
}
```

## 2. Running the Server: Transports

Choose a transport based on `process.env.MCP_TRANSPORT` (`http` or `stdio`).

### Option A: Streamable HTTP (Persistent Instance)

Uses `express` to handle HTTP requests. The `McpServer` and `StreamableHTTPServerTransport` instances are created once and reused for all incoming requests for better performance.

```typescript
import express from 'express';
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp.js";
// Assume createMcpServer is defined as above

async function runHttpServer() {
  // Get port from environment or use default 3123
  const PORT = parseInt(process.env.MCP_PORT || '3123', 10);

  const app = express();
  app.use(express.json()); // Middleware to parse JSON bodies

  // --- SETUP MCP SERVER AND TRANSPORT ONCE ---
  console.log("Creating MCP Server and Transport instances...");
  let server: McpServer | null = null;
  let transport: StreamableHTTPServerTransport | null = null;
  try {
    server = createMcpServer(); // Create the server instance with all tools defined
    transport = new StreamableHTTPServerTransport({
      // Use undefined sessionIdGenerator for the basic mode where
      // the transport itself doesn't manage distinct sessions.
      // Any session/user state must be handled externally (e.g., via tokens).
      sessionIdGenerator: undefined,
    });

    await server.connect(transport); // Connect server logic to the transport
    console.log("MCP Server connected to transport.");

  } catch (error) {
    console.error('FATAL: Could not initialize MCP Server or Transport:', error);
    process.exit(1); // Exit if core setup fails
  }
  // ---------------------------------------------

  // Main MCP endpoint - uses the *existing* transport instance
  app.post('/mcp', async (req, res) => {
    const requestId = (req.body as any)?.id ?? 'N/A';
    console.log(`Received POST /mcp (Request ID: ${requestId})`);

    if (!transport || !server) {
      // Should not happen if setup succeeded, but safety check
      console.error(`Error handling request ${requestId}: Transport or Server not initialized.`);
      return res.status(500).json({
          jsonrpc: '2.0',
          error: { code: -32603, message: 'Internal server error: Server components not ready' },
          id: requestId,
        });
    }

    try {
      // Process the request using the existing, connected transport
      await transport.handleRequest(req, res, req.body);
      // transport.handleRequest takes care of sending the response/stream
      console.log(`Finished handling request ID: ${requestId}`);

    } catch (error) {
      console.error(`Error handling MCP request ID: ${requestId}`, error);
      // Ensure an error response if handleRequest failed badly and headers aren't sent
      if (!res.headersSent) {
        res.status(500).json({
          jsonrpc: '2.0',
          error: { code: -32603, message: 'Internal server error during request handling' },
          id: requestId,
        });
      }
      // Consider if transport needs specific error handling/reset logic here
    }
  });

  // Handle other methods (optional but good practice)
  app.get('/mcp', (req, res) => { res.status(405).send('Method Not Allowed')});
  app.delete('/mcp', (req, res) => { res.status(405).send('Method Not Allowed')});

  // Start listening only after successful server/transport setup
  const listener = app.listen(PORT, () => {
    console.log(`MCP Server (HTTP - Persistent Instance) listening on http://localhost:${PORT}/mcp`);
  });

  // Graceful shutdown handling
  const shutdown = async () => {
    console.log('Shutdown signal received: closing MCP server and transport.');
    listener.close(async (err) => {
        if (err) {
            console.error("Error closing HTTP server:", err);
        }
        try {
            await transport?.close();
            await server?.close();
            console.log('MCP cleanup finished.');
            process.exit(err ? 1 : 0);
        } catch (shutdownErr) {
            console.error("Error during MCP cleanup:", shutdownErr);
            process.exit(1);
        }
    });
  };

  process.on('SIGTERM', shutdown);
  process.on('SIGINT', shutdown);
}
```

### Option B: stdio

For direct command-line interaction (e.g., piping).

```typescript
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
// Assume createMcpServer is defined as above

async function runStdioServer() {
  console.error("Starting MCP Server on stdio..."); // Logs to stderr

  const server = createMcpServer();
  const transport = new StdioServerTransport();

  await server.connect(transport);

  console.error("MCP Server connected and running via stdio.");
  // The server will now listen for MCP JSON-RPC messages on stdin
  // and send responses/notifications on stdout.

  // Optional: Graceful shutdown for stdio (less common but possible)
  const shutdownStdio = async () => {
    console.error('Shutdown signal received: closing MCP server and transport (stdio).');
     try {
        await transport?.close(); // StdioTransport might have cleanup
        await server?.close();
        console.error('MCP cleanup finished (stdio).');
        process.exit(0);
    } catch (shutdownErr) {
        console.error("Error during MCP cleanup (stdio):", shutdownErr);
        process.exit(1);
    }
  };
  process.on('SIGTERM', shutdownStdio);
  process.on('SIGINT', shutdownStdio);
}
```

## 3. Main Execution Logic

Combine the above options based on configuration.

```typescript
// Import necessary modules like express, McpServer, transports, z, etc.
// Include the createMcpServer function definition.
// Include runHttpServer and runStdioServer function definitions.

async function main() {
  // Default to 'http' if MCP_TRANSPORT is not set
  const transportType = process.env.MCP_TRANSPORT || 'http';

  console.log(`Attempting to start MCP server with transport: ${transportType}`);

  if (transportType === 'http') {
    await runHttpServer();
  } else if (transportType === 'stdio') {
    await runStdioServer();
  } else {
    console.error(`Error: Unknown MCP_TRANSPORT specified: '${transportType}'.`);
    console.error("Please set MCP_TRANSPORT to 'http' or 'stdio'.");
    process.exit(1);
  }
}

main().catch((error) => {
  console.error("Fatal error during server startup:", error);
  process.exit(1);
});
```

## Summary

1.  Define tool input and output schemas using **Zod**, including `.describe()` for all parameters and fields.
2.  Create an `McpServer` instance inside a reusable function (`createMcpServer`).
3.  Define tools on the server instance using `server.registerTool(name, config, handler)`. **Include clear descriptions** for all tools and schemas.
4.  **Always provide output schemas** - Tools must define structured response formats for proper client integration.
5.  **Tool handlers must return `structuredContent` and `content`** - `structuredContent` contains the structured data matching the output schema. Use empty `content: []` array to minimize network overhead.
6.  **Use tool annotations** to provide metadata about tool behavior (readOnlyHint, idempotentHint, openWorldHint).
7.  Choose **transport**: `StreamableHTTPServerTransport` or `StdioServerTransport`.
8.  Instantiate the chosen transport (configure HTTP port via `MCP_PORT` or default `3123`).
9.  For HTTP, create the `McpServer` and `StreamableHTTPServerTransport` instances **once** before starting the `express` listener. Use `transport.handleRequest` within the request handler. Implement graceful shutdown.
10. Connect the server to the transport using `server.connect(transport)`.
11. Use `process.env.MCP_TRANSPORT` to select the mode at runtime.

**Tool Response Format:**
```typescript
return {
  content: [],  // Empty array to minimize network overhead
  structuredContent: outputSchemaData  // Structured data matching output schema
};
```

**Tool Annotations (Spec 2025-03-26):**
- `readOnlyHint`: Tool doesn't modify its environment
- `idempotentHint`: Calling with same args has no additional effect 
- `openWorldHint`: Tool interacts with external entities/services

This provides a robust and performant foundation for exposing tools via MCP with structured responses and proper type safety. Remember to handle errors appropriately within your tool handlers and implement necessary application-level logic around the MCP server.